(1)
categoryItems :: [OrderItem] -> Category -> [OrderItem]
categoryItems [] _ = []
categoryItems (x:xs) category
    | itemCategory x == category = x : categoryItems xs category
    | otherwise = categoryItems xs category
testCategoryItems = do
  assertEq "categoryItems cookware"
           (categoryItems items "cookware")
           cookware
  assertEq "categoryItems apparel"
           (categoryItems items "apparel")
           apparel
  assertEq "categoryItems food"
           (categoryItems items "food")
           food
  assertEq "categoryItems games"
           (categoryItems items "games")
           [ ]

(2) 
comprCategoryItems :: [OrderItem] -> Category -> [OrderItem]
comprCategoryItems items category = [item | item <- items, itemCategory item == category]
testComprCategoryItems = do
  assertEq "comprCategoryItems cookware"
           (comprCategoryItems items "cookware")
           cookware
  assertEq "comprCategoryItems apparel"
           (comprCategoryItems items "apparel")
           apparel
  assertEq "comprCategoryItems food"
           (comprCategoryItems items "food")
           food

(3)
itemsTotal :: [ OrderItem ] -> Float
itemsTotal items = foldr (\item acc -> acc + fromIntegral (itemNUnits item) * itemUnitPrice item) 0.0 items
testItemsTotal = do
  assertEq "itemsTotal all"
           (itemsTotal items)
           (fromIntegral (itemNUnits item1) * itemUnitPrice item1
           + fromIntegral (itemNUnits item2) * itemUnitPrice item2
           + fromIntegral (itemNUnits item3) * itemUnitPrice item3
           + fromIntegral (itemNUnits item4) * itemUnitPrice item4
           + fromIntegral (itemNUnits item5) * itemUnitPrice item5
           + fromIntegral (itemNUnits item6) * itemUnitPrice item6)
  assertEq "itemsTotal empty" (itemsTotal [ ]) 0.0

(4)
factorial :: Integer -> Integer
factorial n
  | n == 0    = 1
  | otherwise = n * factorial (n - 1)
testFactorial = do
  assertEq "factorial 0" (factorial 0) 1
  assertEq "factorial 1" (factorial 1) 1
  assertEq "factorial 2" (factorial 2) 2
  assertEq "factorial 4" (factorial 4) 24
  assertEq "factorial 6" (factorial 6) 720

(5)
factNums :: [Integer]
factNums = scanl (*) 1 [1..]
import Unit  -- crude assertions for unit tests

import Data.List

type Sku = String
type Category = String
type NUnits = Int
type UnitPrice = Float

-- an OrderItem is a Haskell record.  Note that Haskell creates
-- accessor functions for each field.  For example, given item :: OrderItem,
-- (itemCategory item) :: Category.
data OrderItem = OrderItem {
  itemSku :: Sku,
  itemCategory :: Category,
  itemNUnits :: NUnits,
  itemUnitPrice :: UnitPrice
} deriving ( Eq, Show )

item1 = OrderItem "cw123" "cookware" 3 12.50
item2 = OrderItem "cw126" "cookware" 2 11.50
item3 = OrderItem "ap723" "apparel" 2 10.50
item4 = OrderItem "cw127" "cookware" 1 9.99
item5 = OrderItem "ap273" "apparel" 3 21.50
item6 = OrderItem "fd825" "food" 1 2.48

cookware = [ item1, item2, item4 ]
apparel = [ item3, item5 ]
food = [ item6 ]
items = [ item1, item2, item3, item4, item5, item6 ]

factNums :: [Integer]
factNums = scanl (*) 1 [1..]

testFactNums = do
  assertEq "factNums first 6" (take 6 factNums) [1, 1, 2, 6, 24, 120]
  assertEq "factNums first 10"
           (take 10 factNums)
           [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]

(6)

factNums :: [Integer]
factNums = scanl (*) 1 [1..]

testFactNums = do
  assertEq "factNums first 6" (take 6 factNums) [1, 1, 2, 6, 24, 120]
  assertEq "factNums first 10"
           (take 10 factNums)
           [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]

assoc :: Eq a => a -> AssocList a b -> Maybe b
assoc _ [] = Nothing
assoc k ((x,y):xs) | k == x = Just y
                   | otherwise = assoc k xs

testAssoc = do
  assertEq "assoc first"
           (assoc "a" [("a", 1.0), ("b", 2.0), ("c", 3.0)])
           (Just 1.0)
  assertEq "assoc second"
           (assoc "b" [("a", "1"), ("b", "2"), ("c", "3")])
           (Just "2")
  assertEq "assoc last"
           (assoc "c" [("a", "1"), ("b", "2"), ("c", "3")])
           (Just "3")
  assertEq "assoc fail"
           (assoc "d" [("a", "1"), ("b", "2"), ("c", "3")])
           Nothing

(7)

import Data.List

type VarName = String
data Struct = Struct String [Term] deriving (Eq, Show)
data Binding = (VarName, Struct) deriving (Eq, Show)

sortBindings :: [Binding] -> [Binding]
sortBindings = sortBy (\(vn1, _) (vn2, _) -> compare vn1 vn2)
testSortBindings = do
  assertEq "empty" (sortBindings []) []
  assertEq "singleton"
           (sortBindings [("X", Struct "a" [])])
           [("X", Struct "a" [])]
  assertEq "triple"
           (sortBindings [("C", Struct "c" []),
                          ("A", Struct "a" []),
                          ("B", Struct "b" [])])
           [("A", Struct "a" []),
            ("B", Struct "b" []),
            ("C", Struct "c" [])]
  assertEq "multiple"
           (sortBindings [("C", Struct "c" []),
                          ("E", Struct "e" []),
                          ("F", Struct "f" []),
                          ("D", Struct "d" []),
                          ("G", Struct "g" []),
                          ("B", Struct "b" [])])
           [("B", Struct "b" []),           
            ("C", Struct "c" []),
            ("D", Struct "d" []),
            ("E", Struct "e" []),
            ("F", Struct "f" []),
            ("G", Struct "g" [])]

(8)

substTerm :: Term -> [Binding] -> Term
substTerm (Var name) bindings = case assoc name bindings of
                                  Just t -> t
                                  Nothing -> Var name
substTerm (Struct name args) bindings = Struct name (map (`substTerm` bindings) args)
testSubstTerm =
  let bindings = [
          ("A", Struct "a" []),
          ("C", Struct "c" []),
          ("B", Struct "b" []),
          ("E", (Var "A")),
          ("D", Struct "f" [(Var "E"), (Var "C")])] in
   do
      assertEq "nop" (substTerm (Var "X") bindings) (Var "X")
      assertEq "f(A) => f(a)"
               (substTerm (Struct "f" [(Var "A")]) bindings)
               (Struct "f" [(Struct "a" [])])
      assertEq "f(A, B, C) => f(a, b, c)"
               (substTerm (Struct "f" [(Var "A"), (Var "B"), (Var "C")])
                          bindings)
               (Struct "f" [(Struct "a" []), (Struct "b" []), (Struct "c" [])])
      assertEq "f(E) => f(a)"
               (substTerm (Struct "f" [(Var "E")]) bindings)
               (Struct "f" [(Struct "a" [])])
      assertEq "f(g(A, D)) => f(g(a, f(a, c)))"
               (substTerm (Struct "f" [Struct "g" [Var "A", Var "D"]]) bindings)
               (Struct "f" [Struct "g" [Struct "a" [],
                                        Struct "f" [Struct "a" [],
                                                    Struct "c" []]]])

(10)

normalizeBindings :: [Binding] -> [Binding]
normalizeBindings bindings =
  let substs = map (\(var, term) -> (var, substTerm term bindings)) bindings
      sortedSubsts = sortBy (comparing fst) substs
  in nubBy (\(var1, _) (var2, _) -> var1 == var2) sortedSubsts
testUnify = do
  assertEq "unify: X = Y => [(X, Y)]"
           (unify (Var "X") (Var "Y"))
           (Just [("X", Var "Y")])
  assertEq "unify: X = X => []"
           (unify (Var "X") (Var "X"))
           (Just [])
  assertEq "unify: X = a => [(X, a)]"
           (unify (Var "X") (Struct "a" []))
           (Just [("X", Struct "a" [])])
  assertEq "unify: a = X => [(X, a)]"
           (unify (Struct "a" []) (Var "X") )
           (Just [("X", Struct "a" [])])
  assertEq "unify: a = a => []"
           (unify (Struct "a" []) (Struct "a" []))
           (Just [])
  assertEq "unify: a \\= b => fail"
           (unify (Struct "a" []) (Struct "b" []))
           Nothing
  assertEq "unify: f(X) = f(a) => [(X, a)]"
           (unify (Struct "f" [(Var "X")]) (Struct "f" [(Struct "a" [])]))
           (Just [("X", Struct "a" [])])
  assertEq "unify: f(X) \\= f => fail"
           (unify (Struct "f" [(Var "X")]) (Struct "f" []))
           Nothing
  assertEq "unify: f(X, a) = f(a, X) => [(X, a)]"
           (unify (Struct "f" [(Var "X"), (Struct "a" [])])
                  (Struct "f" [(Struct "a" []), (Var "X")]))
           (Just [("X", Struct "a" [])])
  assertEq "unify: f(X, a) \\= f(b, X) => fail"
           (unify (Struct "f" [(Var "X"), (Struct "a" [])])
                  (Struct "f" [(Struct "b" []), (Var "X")]))
           Nothing
  assertEq "unify: f(g(X), a) \\= f(g(a), X) => [(X, a)]"
           (unify (Struct "f" [(Struct "g" [(Var "X")]), (Struct "a" [])])
                  (Struct "f" [(Struct "g" [(Struct "a" [])]), (Var "X")]))
           (Just [("X", Struct "a" [])])
  assertEq "unify: f(g(X), b) \\= f(g(a), X) => fail"
           (unify (Struct "f" [(Struct "g" [(Var "X")]), (Struct "b" [])])
                  (Struct "f" [(Struct "g" [(Struct "a" [])]), (Var "X")]))
           Nothing 
  assertEq "unify: f(g(X), a) = f(g(Y), X) => [(X, a), (Y, a)]"
           (unify (Struct "f" [(Struct "g" [(Var "X")]), (Struct "a" [])])
                  (Struct "f" [(Struct "g" [(Var "Y")]), (Var "X")]))
           (Just [("X", Struct "a" []), ("Y", Struct "a" [])])
